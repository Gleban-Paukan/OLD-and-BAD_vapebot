#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import datetime
import os
import sys
import time as tm

import qrcode
import telebot
from requests import ReadTimeout
from telebot import types

import InfoUser
import support_library

bot = telebot.TeleBot('')
bot.parse_mode = 'html'
admins = []
balance_dict = {}


@bot.message_handler(commands=['start'])
def welcome(message):
    with open('UsersInfo.txt', 'r') as file:
        Users = [x.split()[0] for x in file]
    if ' ' in message.text and message.chat.id in admins:
        buyer = InfoUser.DefineUser(message.chat.id)
        bot.send_message(message.chat.id,
                         f'–ù–∞—à—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <ins>{buyer.name}</ins>, –µ–≥–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ <ins>{buyer.phone}</ins>\n\n–í–≤–µ–¥–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –µ–º—É –Ω–∞—á–∏—Å–ª–∏—Ç—å.')
        balance_dict[message.chat.id] = int(message.text.split()[1])
        bot.register_next_step_handler(message, add_coins)
    elif str(message.chat.id) in Users:
        user = InfoUser.DefineUser(message.chat.id)
        bot.send_message(message.chat.id,
                         f"–ü—Ä–∏–≤–µ—Ç, <b>{user.name}</b> üòç, —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å {user.balance}, –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –º—ã —Ç–µ–±—è –≤–∏–¥–µ–ª–∏ {support_library.define_date(user.date)}, —Å–µ–π—á–∞—Å —É —Ç–µ–±—è —Å–∫–∏–¥–∫–∞ <b>{int((1 - support_library.define_sale_procent(user.balance)) * 100)}%</b>.\n{support_library.define_left_for_sale(user.balance)}")
    else:
        with open('UsersId.txt', 'a') as file:
            file.write(f'{message.chat.id}\n')
        for _ in range(3):
            bot.send_chat_action(message.chat.id, 'typing')
            tm.sleep(.5)
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—à—å –Ω–∞—à–µ–º—É <b>—à–æ–ø—É</b> ‚ù§Ô∏è')
        for _ in range(6):
            bot.send_chat_action(message.chat.id, 'typing')
            tm.sleep(.5)
        bot.send_message(message.chat.id,
                         '''GRADE SHOP BONUS –†–ê–ë–û–¢–ê–ï–¢ –¢–ê–öüëá
<b>
–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç–≤–æ–π —Å—á–µ—Ç –ø–æ–∫–∞–∂–µ—Ç: 
3 000 –±–∞–ª–ª–æ–≤, —Ç–≤–æ—è —Å–∫–∏–¥–∫–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç 2%
5 000 –±–∞–ª–ª–æ–≤, —Ç–≤–æ—è —Å–∫–∏–¥–∫–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç 3%
7 000 –±–∞–ª–ª–æ–≤, —Ç–≤–æ—è —Å–∫–∏–¥–∫–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç 5%
</b>
–í—Å–µ –ø—Ä–æ—Å—Ç–æ, —á–µ–º –±–æ–ª—å—à–µ –ø–æ–∫—É–ø–∞–µ—à—å, —Ç–µ–º –±–æ–ª—å—à–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏. –°–∫–∏–¥–∫–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ –≤–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µüî•
''')
        for _ in range(16):
            bot.send_chat_action(message.chat.id, 'typing')
            tm.sleep(.5)
        bot.send_message(message.chat.id,
                         '''–ë–∞–ª–ª—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∏ —Å–≥–æ—Ä–∞—é—Ç –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É <b>3 000 
                         –±–∞–ª–ª–æ–≤</b>, (–∞ —ç—Ç–æ 2% —Å–∫–∏–¥–∫–∏) —Ç–æ —Å–∫–∏–¥–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ä–æ–≤–Ω–æ 1 –º–µ—Å—è—Ü —Å –º–æ–º–µ–Ω—Ç–∞ –µ–µ –ø–æ–ª—É—á–µ–Ω–∏—è.

<b>–ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Å–∫–∏–¥–∫—É, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å –±–∞–ª–ª–æ–≤ üòè</b>''')
        for _ in range(12):
            bot.send_chat_action(message.chat.id, 'typing')
            tm.sleep(.5)
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(callback_data='registration', text='–ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–¢–¨–°–Ø üî•'))
        bot.send_message(message.chat.id, '–ó–∞—á–∏—Å–ª–∏—Ç—å –Ω–∞ —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç <b>500 –±–∞–ª–ª–æ–≤</b>? ‚òÑÔ∏è', reply_markup=markup)


@bot.message_handler(commands=['account'])
def account(message):
    user = InfoUser.DefineUser(message.chat.id)
    if user.ID != None:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        bot.send_message(message.chat.id, f'–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ ü´∂\n\n<b>–ò–º—è:</b> {user.name}\n<b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: {user.phone}',
                         reply_markup=markup)
        send_QR(message)
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.')


@bot.message_handler(commands=['scores'])
def scores(message):
    user = InfoUser.DefineUser(message.chat.id)
    if user.ID != None:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å QR –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è'))
        bot.send_message(message.chat.id,
                         f'{user.name}, —É —Ç–µ–±—è <b>{user.balance} –±–∞–ª–ª–æ–≤</b>, —Ç–≤–æ—è —Å–∫–∏–¥–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {int((1 - support_library.define_sale_procent(user.balance)) * 100)}%.',
                         reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.')


@bot.message_handler(commands=['faq'])
def scores(message):
    bot.send_message(message.chat.id, '–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ: <b>https://t.me/LINK_IS_PRIVATE</b>')


@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.chat.type == 'private':
        if message.text == '–ü–æ–∫–∞–∑–∞—Ç—å QR –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è':
            send_QR(message)
        elif message.text == '–ó–∞–ø—É—Å–∫':
            while True:
                checker_date()
                tm.sleep(60 * 60 * 12)  # Yes, I know :) I was too young
        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è', reply_markup=markup)
            bot.register_next_step_handler(message, change_name)
        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>+79xxxxxxxxx</b>',
                             reply_markup=markup)
            bot.register_next_step_handler(message, change_phone)


@bot.message_handler(content_types=['left_chat_member'])
def leave_memb(message):
    bot.delete_message(message.chat.id, message.id)


@bot.message_handler(content_types=['new_chat_members'])
def qweqwewq(message):
    bot.delete_message(message.chat.id, message.id)
    msg = bot.send_message(message.chat.id,
                           f'<ins><i>{message.from_user.first_name}</i></ins>, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ!',
                           parse_mode='html')
    tm.sleep(60)
    bot.delete_message(msg.chat.id, msg.id)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        if call.data == 'registration':
            for _ in range(3):
                bot.send_chat_action(call.message.chat.id, 'typing')
                tm.sleep(.5)
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data='accept_politics'))
            bot.send_message(call.message.chat.id,
                             '''–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å <b><a 
                             href="https://docs.google.com/document/d/LINK_IS_PRIVATE/edit?usp=sharing">–ø–æ–ª–∏—Ç–∏–∫–æ–π 
                             –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a></b> –∏, –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–Ω—ã, —Ç–æ –Ω–∞–∂–∞—Ç—å <b>"‚úÖ –ü—Ä–∏–Ω—è—Ç—å"</b>''',
                             reply_markup=markup, disable_web_page_preview=True)
        elif call.data == 'accept_politics':
            for _ in range(3):
                bot.send_chat_action(call.message.chat.id, 'typing')
                tm.sleep(.5)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(types.KeyboardButton(text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º üì§', request_contact=True))
            bot.send_message(call.message.chat.id, '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º', reply_markup=markup)
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)


@bot.message_handler(content_types=['contact'])
def accept_phone(message):
    if message.contact is not None:
        with open('UsersPhone.txt', 'a') as users_id:
            users_id.write(str(message.chat.id) + f' {str(message.contact.phone_number)}\n')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for _ in range(2):
            bot.send_chat_action(message.chat.id, 'typing')
            tm.sleep(.5)
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è', reply_markup=markup)
        bot.register_next_step_handler(message, user_name)


def user_name(message):
    if (' ' not in message.text) and len(message.text) <= 30 and message.text.isalpha():
        with open('UsersName.txt', 'a') as users_id:
            users_id.write(str(message.chat.id) + f' {message.text}\n')
        for _ in range(3):
            bot.send_chat_action(message.chat.id, 'typing')
            tm.sleep(.5)
        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–¥–¥.–º–º.–≥–≥–≥–≥</b>')
        bot.register_next_step_handler(message, user_birthday)
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Å–≤–æ—ë –∏–º—è.')
        bot.register_next_step_handler(message, user_name)


def user_birthday(message):
    try:
        s = message.text.split('.')
        dt = datetime.date(int(s[2]), int(s[1]), int(s[0]))
        years = (datetime.date.today() - dt).days // 364
        if years >= 18:
            with open('UsersInfo.txt', 'a', encoding='utf-8') as file:
                with open('UsersName.txt', 'r', encoding='utf-8') as f:
                    for x in f:
                        if str(message.chat.id) in x:
                            name = x.split()[1]
                            break
                with open('UsersPhone.txt', 'r') as f:
                    for x in f:
                        if str(message.chat.id) in x:
                            phone = x.split()[1]
                            break
                file.write(str(message.chat.id) + f' {name},{phone},500,{datetime.date.today()},0\n')
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å QR –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è'))
            for _ in range(2):
                bot.send_chat_action(message.chat.id, 'typing')
                tm.sleep(.5)
            bot.send_message(message.chat.id,
                             f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è, <b>{name}</b>!üòç –ù–∞ —Ç–≤–æ–π —Å—á—ë—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>500 –±–∞–ª–ª–æ–≤</b>.',
                             reply_markup=markup)
            for _ in range(1):
                bot.send_chat_action(message.chat.id, 'typing')
                tm.sleep(.5)
            send_QR(message)
        else:
            bot.send_message(message.chat.id, '–í–∞–º –Ω–µ—Ç 18 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
            bot.register_next_step_handler(message, user_birthday)
    except Exception as Ex:
        print(Ex)
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–¥–¥.–º–º.–≥–≥–≥–≥</b>')
        bot.register_next_step_handler(message, user_birthday)


def send_QR(message):
    qrcode.make(f'https://t.me/LINK_IS_PRIVATE?start={message.chat.id}').save('QR.png')
    with open('QR.png', 'rb') as QR:
        bot.send_photo(message.chat.id, photo=QR,
                       caption='–¢–≤–æ–π QR –∫–æ–¥ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤, –ø–æ–∫–∞–∂–∏ –µ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞–º –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤')
    os.remove('QR.png')


def add_coins(message):
    if message.text[1:].isdigit():
        support_library.add_balance(balance_dict[message.chat.id], int(message.text))
        user = InfoUser.DefineUser(balance_dict[message.chat.id])
        bot.send_message(message.chat.id,
                         f'–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–∏–ª. –¢–µ–ø–µ—Ä—å –µ–≥–æ –±–∞–ª–∞–Ω—Å {user.balance}.\n–°–µ–π—á–∞—Å –µ–≥–æ —Å–∫–∏–¥–∫–∞ {int((1 - support_library.define_sale_procent(user.balance - int(message.text))) * 100)}%, –µ–≥–æ —á–µ–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç {int(message.text) * support_library.define_sale_procent(user.balance - int(message.text))}')
        bot.send_message(user.ID, f'''
–°–æ–≤–µ—Ä—à–∞—è –ø–æ–∫—É–ø–∫–∏ —É –Ω–∞—Å, —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ‚ù§Ô∏è 
–¢–≤–æ–∏ –±–∞–ª–ª—ã –∑–∞ –ø–æ–∫—É–ø–∫—É –Ω–∞ <b>{message.text} —Ä—É–±–ª–µ–π</b>, –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{user.balance} –±–∞–ª–ª–æ–≤</b> 
''')


def checker_date():
    with open('UsersInfo.txt', 'r') as file:
        for i in file:
            user = InfoUser.DefineUser(i.split()[0])
            x = user.date.split('-')
            past_days = (datetime.date.today() - datetime.date(int(x[0]), int(x[1]), int(x[2]))).days
            if 14 <= past_days <= 30 and user.flag == 0:
                bot.send_message(user.ID,
                                 f'–ü—Ä–∏–≤–µ—Ç, –Ω—É –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?\n<b>{user.name}</b>, –¥–∞–≤–Ω–æ —Ç–µ–±—è –Ω–µ –≤–∏–¥–µ–ª–∏, –∂–¥—ë–º –≤ –≥–æ—Å—Ç–∏ üòç')
                support_library.change_flag(user.ID, 1)
            elif past_days > 30:
                support_library.add_balance(user.ID, -1 * user.balance)
                bot.send_message(user.ID,
                                 '–ü—Ä–∏–≤–µ—Ç. –¢—ã –Ω–µ –±—ã–ª —É –Ω–∞—Å –±–æ–ª–µ–µ 30 –¥–Ω–µ–π. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –ø—Ä–æ—Ä–≥–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏—à–ª–æ—Å—å –æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å.')


def change_name(message):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ <b>–æ—Ç–º–µ–Ω–µ–Ω–æ.</b>')
    else:
        if (' ' not in message.text) and len(message.text) <= 30 and message.text.isalpha():
            support_library.change_data(message.chat.id, new_name=message.text)
            bot.send_message(message.chat.id, '–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ.')
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
            bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Å–≤–æ—ë –∏–º—è.', reply_markup=markup)
            bot.register_next_step_handler(message, change_name)


def change_phone(message):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ <b>–æ—Ç–º–µ–Ω–µ–Ω–æ.</b>')
    else:
        if message.text[0] == '+' and message.text[1:].isdigit() and len(message.text) == 12:
            support_library.change_data(message.chat.id, new_phone=message.text)
            bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä –∏–∑–º–µ–Ω—ë–Ω')
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
            bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>+79xxxxxxxxx</b>',
                             reply_markup=markup)
            bot.register_next_step_handler(message, change_name)


try:
    bot.infinity_polling(timeout=10, long_polling_timeout=5)
except (ConnectionError, ReadTimeout) as e:
    sys.stdout.flush()
    os.execv(sys.argv[0], sys.argv)
else:
    bot.infinity_polling(timeout=10, long_polling_timeout=5)
